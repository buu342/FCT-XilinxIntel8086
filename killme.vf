////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2007 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 9.2i
//  \   \         Application : sch2verilog
//  /   /         Filename : killme.vf
// /___/   /\     Timestamp : 06/11/2018 00:24:54
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx92i\bin\nt\sch2verilog.exe -intstyle ise -family spartan3e -w "C:/Documents and Settings/SL2aluno/Desktop/Nosso/TrabalhoFinalSL2/killme.sch" killme.vf
//Design Name: killme
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module killme(CA, 
              CB, 
              CC, 
              CD, 
              CLK, 
              CPC, 
              C_TMP, 
              IA, 
              IB, 
              IC, 
              ID, 
              INTR, 
              RBus, 
              RC, 
              RDAND, 
              RDOR, 
              Reset, 
              ZA, 
              ZB, 
              ZC, 
              ZD, 
              ZSP, 
              ZTMP, 
              A_Q, 
              B_Q, 
              C_Q, 
              D_Q, 
              QALU, 
              QF, 
              QIR, 
              Q_PC, 
              Data_Bus);

    input CA;
    input CB;
    input CC;
    input CD;
    input CLK;
    input CPC;
    input C_TMP;
    input IA;
    input IB;
    input IC;
    input ID;
    input INTR;
    input RBus;
    input RC;
    input RDAND;
    input RDOR;
    input Reset;
    input ZA;
    input ZB;
    input ZC;
    input ZD;
    input ZSP;
    input ZTMP;
   output [7:0] A_Q;
   output [7:0] B_Q;
   output [7:0] C_Q;
   output [7:0] D_Q;
   output [7:0] QALU;
   output [7:0] QF;
   output [7:0] QIR;
   output [7:0] Q_PC;
    inout [7:0] Data_Bus;
   
   wire [7:0] Addr_BUS;
   wire DSP;
   wire IPC;
   wire ISP;
   wire ITMP;
   wire LDTMP;
   wire RA;
   wire RB;
   wire RD;
   wire RDADD;
   wire RDNOT;
   wire RDXOR;
   wire RF;
   wire RIR;
   wire RMAR;
   wire RPC;
   wire Rsignals;
   wire RSP;
   wire RTMP;
   wire WB;
   wire WC;
   wire WD;
   wire WF;
   wire WIR;
   wire WMAR;
   wire WPC;
   wire WSP;
   wire XLXN_81;
   wire XLXN_82;
   wire XLXN_89;
   wire XLXN_90;
   wire [7:0] XLXN_91;
   wire [7:0] QIR_DUMMY;
   wire [7:0] QF_DUMMY;
   
   assign QF[7:0] = QF_DUMMY[7:0];
   assign QIR[7:0] = QIR_DUMMY[7:0];
   CONTROLADOR XLXI_63 (.CLK(CLK), 
                        .FLAGS(QF_DUMMY[7:0]), 
                        .INTR(INTR), 
                        .OP(QIR_DUMMY[7:0]), 
                        .RESET(Reset), 
                        .DSP(DSP), 
                        .EIO(), 
                        .ERAM(XLXN_81), 
                        .INTA(), 
                        .IPC(IPC), 
                        .ISP(ISP), 
                        .ITMP(ITMP), 
                        .LDTMP(LDTMP), 
                        .nRW(XLXN_82), 
                        .RA(RA), 
                        .RB(RB), 
                        .RD(RD), 
                        .RDADD(RDADD), 
                        .RDNOT(RDNOT), 
                        .RDXOR(RDXOR), 
                        .RF(RF), 
                        .RIR(RIR), 
                        .RMAR(RMAR), 
                        .RPC(RPC), 
                        .RSignals(Rsignals), 
                        .RSP(RSP), 
                        .RTMP(RTMP), 
                        .WA(XLXN_90), 
                        .WB(WB), 
                        .WC(WC), 
                        .WD(WD), 
                        .WF(WF), 
                        .WIR(WIR), 
                        .WMAR(WMAR), 
                        .WPC(WPC), 
                        .WSP(WSP), 
                        .WTMP(RDNOT), 
                        .ZPC(XLXN_89));
   ram_rom256 XLXI_64 (.address(Addr_BUS[7:0]), 
                       .CLK(CLK), 
                       .Enable(XLXN_81), 
                       .nrw(XLXN_82), 
                       .ram_in(Data_Bus[7:0]), 
                       .ramrom_out());
   Ram8x1 XLXI_65 (.Bus_In(Data_Bus[7:0]), 
                   .Clear(XLXN_89), 
                   .CLK(CLK), 
                   .Complement(CPC), 
                   .Increment(IPC), 
                   .Read(RPC), 
                   .Write(WPC), 
                   .Bus_D(Data_Bus[7:0]), 
                   .Bus_Q(Q_PC[7:0]));
   MAR XLXI_68 (.CLK(CLK), 
                .MAR_In(Data_Bus[7:0]), 
                .RMAR(RMAR), 
                .WMAR(WMAR), 
                .MAR_Out(Addr_BUS[7:0]));
   Ram8x1 XLXI_69 (.Bus_In(Data_Bus[7:0]), 
                   .Clear(ZA), 
                   .CLK(CLK), 
                   .Complement(CA), 
                   .Increment(IA), 
                   .Read(RA), 
                   .Write(XLXN_90), 
                   .Bus_D(Data_Bus[7:0]), 
                   .Bus_Q(A_Q[7:0]));
   Ram8x1 XLXI_70 (.Bus_In(Data_Bus[7:0]), 
                   .Clear(ZC), 
                   .CLK(CLK), 
                   .Complement(CC), 
                   .Increment(IC), 
                   .Read(RC), 
                   .Write(WC), 
                   .Bus_D(Data_Bus[7:0]), 
                   .Bus_Q(C_Q[7:0]));
   Ram8x1 XLXI_71 (.Bus_In(Data_Bus[7:0]), 
                   .Clear(ZB), 
                   .CLK(CLK), 
                   .Complement(CB), 
                   .Increment(IB), 
                   .Read(RB), 
                   .Write(WB), 
                   .Bus_D(Data_Bus[7:0]), 
                   .Bus_Q(B_Q[7:0]));
   Ram8x1 XLXI_72 (.Bus_In(Data_Bus[7:0]), 
                   .Clear(ZD), 
                   .CLK(CLK), 
                   .Complement(CD), 
                   .Increment(ID), 
                   .Read(RD), 
                   .Write(WD), 
                   .Bus_D(Data_Bus[7:0]), 
                   .Bus_Q(D_Q[7:0]));
   FR XLXI_73 (.ALU(XLXN_91[7:0]), 
               .CLK(CLK), 
               .Flags_In(Data_Bus[7:0]), 
               .RB(RBus), 
               .RF(RF), 
               .WF(WF), 
               .Bus_Q(QF_DUMMY[7:0]), 
               .IR_Out(Data_Bus[7:0]));
   ALU XLXI_74 (.ALU_IN(Data_Bus[7:0]), 
                .CLK(CLK), 
                .C_TMP(C_TMP), 
                .I_TMP(ITMP), 
                .LDTMP(LDTMP), 
                .RDADD(RDADD), 
                .RDAND(RDAND), 
                .RDNOT(RDNOT), 
                .RDOR(RDOR), 
                .RDXOR(RDXOR), 
                .Rsignals(Rsignals), 
                .R_TMP(RTMP), 
                .W_TMP(RDNOT), 
                .Z_TMP(ZTMP), 
                .ALU_OUT(Data_Bus[7:0]), 
                .Bus_Q(QALU[7:0]), 
                .Flags(XLXN_91[7:0]));
   IR XLXI_75 (.CLK(CLK), 
               .IR_In(Data_Bus[7:0]), 
               .RIR(RIR), 
               .WIR(WIR), 
               .Bus_Q(QIR_DUMMY[7:0]), 
               .IR_Out(Data_Bus[7:0]));
   SP XLXI_76 (.CLK(CLK), 
               .DSP(DSP), 
               .ISP(ISP), 
               .RSP(RSP), 
               .SP_In(Data_Bus[7:0]), 
               .WSP(WSP), 
               .ZSP(ZSP), 
               .SP_Out(Data_Bus[7:0]));
endmodule
